%{
#include <stdio.h>
#include "util.h"
#include "symbol.h" 
#include "errormsg.h"
#include "absyn.h"

int yylex(void); /* function prototype */

A_exp absyn_root;

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	A_var var;
	A_exp exp;
    A_expList expList;
    A_efieldList efieldList;
    A_fieldList fieldList;
    A_dec dec;
    A_decList decList;
    A_ty ty;
    A_nametyList nametyList;
    A_fundecList fundecList;
	/* et cetera */
	}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%type <exp> exp program funcall
%type <var> lvalue
%type <expList> callarg callarg1 expseq expseq1
%type <efieldList> recordarg recordarg1
%type <dec> dec vardec
%type <decList> decs
%type <ty> ty
%type <fieldList> tyfields tyfields1
%type <nametyList> tydec tydec1
%type <fundecList> fundec fundec1
/* et cetera */

%start program
%nonassoc ASSIGN
%nonassoc TYPE FUNCTION // in order to remove shift-reduce conflicts when
// matching token TYPE and FUNCTION 
%left OR
%left AND
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%%

program:   exp    {absyn_root = $1;}
       ;

exp: lvalue {$$ = A_VarExp(EM_tokPos, $1);}
   | NIL {$$ = A_NilExp(EM_tokPos);}
   //| LPAREN exp SEMICOLON exp expseq1 RPAREN  {$$ = A_SeqExp(EM_tokPos, A_ExpList($2, A_ExpList($4, $5)));}
   //| LPAREN RPAREN {$$ = A_SeqExp(EM_tokPos, NULL);}
   | INT {$$ = A_IntExp(EM_tokPos, $1);}
   | STRING {$$ = A_StringExp(EM_tokPos, $1);}
   | MINUS exp %prec UMINUS {$$ = A_OpExp(EM_tokPos, A_minusOp, A_IntExp(EM_tokPos, 0), $2);}
   | funcall {$$ = $1;}
   | exp PLUS exp {$$ = A_OpExp(EM_tokPos, A_plusOp, $1, $3);}
   | exp MINUS exp {$$ = A_OpExp(EM_tokPos, A_minusOp, $1, $3);}
   | exp TIMES exp {$$ = A_OpExp(EM_tokPos, A_timesOp, $1, $3);}
   | exp DIVIDE exp {$$ = A_OpExp(EM_tokPos, A_divideOp, $1, $3);}
   | exp EQ exp {$$ = A_OpExp(EM_tokPos, A_eqOp, $1, $3);}
   | exp NEQ exp {$$ = A_OpExp(EM_tokPos, A_neqOp, $1, $3);}
   | exp LT exp {$$ = A_OpExp(EM_tokPos, A_ltOp, $1, $3);}
   | exp LE exp {$$ = A_OpExp(EM_tokPos, A_leOp, $1, $3);}
   | exp GT exp {$$ = A_OpExp(EM_tokPos, A_gtOp, $1, $3);}
   | exp GE exp {$$ = A_OpExp(EM_tokPos, A_geOp, $1, $3);}
   | exp AND exp {$$ = A_IfExp(EM_tokPos, $1, $3, A_IntExp(EM_tokPos,0));}
   | exp OR exp {$$ = A_IfExp(EM_tokPos, $1, A_IntExp(EM_tokPos,1), $3);}
   | ID LBRACE recordarg RBRACE {$$ = A_RecordExp(EM_tokPos, S_Symbol($1), $3);}
   | ID LBRACK exp RBRACK OF exp %prec ASSIGN {$$ = A_ArrayExp(EM_tokPos, S_Symbol($1), $3, $6);}
   | lvalue ASSIGN exp {$$ = A_AssignExp(EM_tokPos, $1, $3);}
   | IF exp THEN exp ELSE exp %prec ASSIGN {$$ = A_IfExp(EM_tokPos, $2, $4, $6);}
   | IF exp THEN exp %prec ASSIGN {$$ = A_IfExp(EM_tokPos, $2, $4, NULL);}
   | WHILE exp DO exp %prec ASSIGN {$$ = A_WhileExp(EM_tokPos, $2, $4);}
   | FOR ID ASSIGN exp TO exp DO exp %prec ASSIGN {$$ = A_ForExp(EM_tokPos, S_Symbol($2), $4, $6, $8);}
   | BREAK {$$ = A_BreakExp(EM_tokPos);}
   | LET decs IN expseq END {$$ = A_LetExp(EM_tokPos, $2, A_SeqExp(EM_tokPos, $4));}
   //| LPAREN exp RPAREN {$$ = $2;}
   | LPAREN expseq RPAREN {$$ = A_SeqExp(EM_tokPos, $2);}
   ;

decs: dec decs {$$ = A_DecList($1, $2);}
    | /* empty */ {$$ = NULL;}
    ;
 
dec: tydec {$$ = A_TypeDec(EM_tokPos, $1);}
   | vardec {$$ = $1;}
   | fundec {$$ = A_FunctionDec(EM_tokPos, $1);}
   ;

tydec: TYPE ID EQ ty tydec1 {$$ = A_NametyList(A_Namety(S_Symbol($2), $4), $5);}
     ;

tydec1: TYPE ID EQ ty tydec1 {$$ = A_NametyList(A_Namety(S_Symbol($2), $4), $5);}
      | %prec ASSIGN {$$ = NULL;} /* empty */
      ;

ty: ID {$$ = A_NameTy(EM_tokPos, S_Symbol($1));}
  | LBRACE tyfields RBRACE {$$ = A_RecordTy(EM_tokPos, $2);}
  | ARRAY OF ID {$$ = A_ArrayTy(EM_tokPos, S_Symbol($3));}
  ;

tyfields: ID COLON ID tyfields1 {$$ = A_FieldList(A_Field(EM_tokPos, S_Symbol($1), S_Symbol($3)), $4);}
        | /* empty */ {$$ = NULL;}
        ;

tyfields1: COMMA ID COLON ID tyfields1 {$$ = A_FieldList(A_Field(EM_tokPos, S_Symbol($2), S_Symbol($4)), $5);}
         | /* empty */ {$$ = NULL;}
         ;

vardec: VAR ID ASSIGN exp {$$ = A_VarDec(EM_tokPos, S_Symbol($2), NULL, $4);}
      | VAR ID COLON ID ASSIGN exp {$$ = A_VarDec(EM_tokPos, S_Symbol($2), S_Symbol($4), $6);}
      ;

fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp fundec1 {$$ = A_FundecList(A_Fundec(EM_tokPos, S_Symbol($2), $4, NULL, $7), $8);}
      | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp fundec1 {$$ = A_FundecList(A_Fundec(EM_tokPos, S_Symbol($2), $4, S_Symbol($7), $9), $10);}
      ;

fundec1: FUNCTION ID LPAREN tyfields RPAREN EQ exp fundec1 {$$ = A_FundecList(A_Fundec(EM_tokPos, S_Symbol($2), $4, NULL, $7), $8);}
      | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp fundec1 {$$ = A_FundecList(A_Fundec(EM_tokPos, S_Symbol($2), $4, S_Symbol($7), $9), $10);}
      | %prec ASSIGN {$$ = NULL;} /* empty */
      ;

lvalue: ID {$$ = A_SimpleVar(EM_tokPos, S_Symbol($1));}
      | lvalue DOT ID {$$ = A_FieldVar(EM_tokPos, $1, S_Symbol($3));}
      | lvalue LBRACK exp RBRACK {$$ = A_SubscriptVar(EM_tokPos, $1, $3);}
      | ID LBRACK exp RBRACK {$$ = A_SubscriptVar(EM_tokPos, A_SimpleVar(EM_tokPos, S_Symbol($1)), $3);}// a seemingly redundant grammar rule to
// handle the confusion about "variable [exp]" and "type-id [exp] of exp"
      ;

expseq: exp expseq1 {$$ = A_ExpList($1, $2);}
      | /* empty */ {$$ = NULL;}
      ;

expseq1: SEMICOLON exp expseq1 {$$ = A_ExpList($2, $3);}
       | /* empty */ {$$ = NULL;}
       ;

funcall: ID LPAREN RPAREN {$$ = A_CallExp(EM_tokPos, S_Symbol($1), NULL);}
       | ID LPAREN callarg RPAREN {$$ = A_CallExp(EM_tokPos, S_Symbol($1), $3);}
       ;

callarg: exp callarg1 {$$ = A_ExpList($1, $2);}
       ; 

callarg1: COMMA exp callarg1 {$$ = A_ExpList($2, $3);}
        | /* empty */ {$$ = NULL;}
        ;
 
recordarg: ID EQ exp recordarg1 {$$ = A_EfieldList(A_Efield(S_Symbol($1), $3), $4);}
         | /* empty */ {$$ = NULL;}
         ;

recordarg1: COMMA ID EQ exp recordarg1 {$$ = A_EfieldList(A_Efield(S_Symbol($2), $4), $5);}
          | /* empty */ {$$ = NULL;}
          ;
